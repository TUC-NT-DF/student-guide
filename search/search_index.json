{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to our team","text":"<p>Please read the information in this project very carefully and take it seriously.</p> <p>It will be the key for your success and will help you to get and stay ahead of the competition.</p> <p>You are invited to contribute. Help us to extend and to improve this userguide.</p> <p>Have fun!</p> <p>Design by removing problems, not adding features. (Pieter Hintjens)</p>"},{"location":"content-knowledgebase/common_pitfalls/","title":"Common pitfalls and how to avoid them","text":"<p>Notice</p> <p>This page is used to document mistakes/pitfalls which happen often or are hard to spot or both.</p>"},{"location":"content-knowledgebase/common_pitfalls/#case-1","title":"Case 1","text":""},{"location":"content-knowledgebase/common_pitfalls/#when","title":"When","text":"<p>During porting a link node ld-node-avt-cam to link2. Seen here.</p>"},{"location":"content-knowledgebase/common_pitfalls/#what-was-the-task","title":"What was the task","text":"<p>To get an IP camera up and running. The Allied Vision Cameras had to be indirectly connected to a laptop (via a network switch). The laptop and the camera need to be on the same network.</p>"},{"location":"content-knowledgebase/common_pitfalls/#where-it-was-stuck","title":"Where it was stuck","text":"<p>The set-up described above was done and then I attempted to start the link node, but got no result. On Windows everything was fine but on Linux it wouldn't work. The camera was pingable but wasn't responding to UDP commands being sent from the laptop in the proprietary protocol. Tried complicated stuff like analysing the packets in Wireshark. This didn't help.</p>"},{"location":"content-knowledgebase/common_pitfalls/#what-was-missed-and-why","title":"What was missed and why","text":"<p>Role of netmask was ignored because it was wrongly assumed to be unimportant or insignificant. Steps to change the IP address and netmask were followed for the laptop, however, it was missed that not only the camera had a different netmask (due to lack of configuration) (255.255.0.0 instead of 255.255.255.0) but also the fact that the camera IP and netmask can be changed using the native application provided by the manufacturer. Also, the device was not tested on Windows to check behaviour there in the very beginning.</p>"},{"location":"content-knowledgebase/common_pitfalls/#how-it-was-fixed","title":"How it was fixed","text":"<p>Was told to check basic stuff like IP and netmask.</p>"},{"location":"content-knowledgebase/common_pitfalls/#why-it-went-wrong","title":"Why it went wrong","text":"<p>Superficial exposure and lack of interest in understanding the camera device lead to the device being improperly used. Lack of attention to detail.</p>"},{"location":"content-knowledgebase/common_pitfalls/#lessons-to-be-learned","title":"Lessons to be learned","text":"<p>It is easy to complicate things when we don't know the basics. Solving a problem often requires narrowing down the problem which requires specific knowledge, not extra tools. Extra tools will make the problem more complex. Admitting lack of knowledge of basic things (in this case netmask configuration) will lead to a narrowing/funneling of the problem. Don't throw tools at problems, throw thorough understanding of basics instead. This is the right way to solve a problem.</p>"},{"location":"content-knowledgebase/common_pitfalls/#case-2","title":"Case 2","text":""},{"location":"content-knowledgebase/common_pitfalls/#when_1","title":"When","text":"<p>During adding a new project to the gitlab repository for the first time.</p>"},{"location":"content-knowledgebase/common_pitfalls/#what-was-the-task_1","title":"What was the task","text":"<p>To add the source code to the gitlab repository.</p>"},{"location":"content-knowledgebase/common_pitfalls/#where-it-was-stuck_1","title":"Where it was stuck","text":"<p>After adding the project to gitlab, the CI pipeline wouldn't start.</p>"},{"location":"content-knowledgebase/common_pitfalls/#what-was-missed-and-why_1","title":"What was missed and why","text":"<p>Adding the hidden files like .gitlab-ci-yml because a <code>git add *</code> does not automatically add those files to the index.</p>"},{"location":"content-knowledgebase/common_pitfalls/#how-it-was-fixed_1","title":"How it was fixed","text":"<p>Was asked to check things on my side when the CI pipeline wouldn't start.</p>"},{"location":"content-knowledgebase/common_pitfalls/#why-it-went-wrong_1","title":"Why it went wrong","text":"<p>Lack of attention to detail and overcondifence in the fact that \"I did everything right\".</p>"},{"location":"content-knowledgebase/common_pitfalls/#lessons-to-be-learned_1","title":"Lessons to be learned","text":"<p>There are two parts to this. First being that; sometimes it is easy to fall into a pattern (in this case <code>git add --&gt; git commit --&gt; expectation that everything is okay</code>) and to believe that there is nothing more to check and asking others to check things on their side. This is not right because there can always be subtle differences and it is always a good idea to double check on your own side before asking others. Second, it is important to recollect and retrace your steps while doing something second (or third usw) time because it is possible that you left out some small but critical step along the way. When we do something repeatedly, we slowly (and quite naturally) gain more and more confidence that we are doing things right and we are less and less skeptical of our performance. But this is kind of a fallacy. If mistake was made once, it can be easily made again (for the same reason it was made before) and it is a good idea to recollect \"what went wrong\" the first time one more time.</p>"},{"location":"content-knowledgebase/coordinate-systems/","title":"Coordinate systems","text":""},{"location":"content-knowledgebase/coordinate-systems/#introduction","title":"Introduction","text":"<p>Coordinate systems are essential for accurately representing locations on the Earth's surface and in navigation systems. Various coordinate systems serve different purposes based on their accuracy, ease of use, and applications. This report examines four coordinate systems: Geographic Coordinate System, ECEF (Earth-Centered, Earth-Fixed), UTM (Universal Transverse Mercator) and Gauss-Kruger.</p> <p>We can categorize them into three categories:</p> <ul> <li>Geographic coordinate system</li> <li>Geocentric coordinate system</li> <li>Projected coordinate systems</li> </ul>"},{"location":"content-knowledgebase/coordinate-systems/#geographic-coordinate-system","title":"Geographic Coordinate System","text":"<p>A Geographic Coordinate System (GCS) is a coordinate system that enables every location on Earth to be specified by a set of numerical coordinates. These coordinates are typically expressed in terms of latitude, longitude and ellipsoidal height. The GCS uses a three-dimensional spherical surface to define locations on the planet.</p> <ul> <li>Latitude (\u03c6): Measures the angle between a point and the equatorial plane, ranging from -90\u00b0 at the South Pole to +90\u00b0 at the North Pole.</li> <li>Longitude (\u03bb): Measures the angle east or west of the Prime Meridian, which runs through Greenwich, England, ranging from -180\u00b0 to +180\u00b0.</li> <li>Ellipsoidal Height (h): Measures the height above the reference ellipsoid</li> </ul> <p></p> <p>There are different height conventions, the most common are:</p> <ul> <li>Ellipsoidal Height (h): The distance above or below the reference ellipsoid surface. This is the height provided by GNSS receivers.</li> <li>Orthometric Height (H): The height above the geoid, which approximates mean sea level. This is often derived from ellipsoidal height by applying a geoid model.</li> <li>Geoid Height (N): The difference between the ellipsoidal height and orthometric height, representing the separation between the WGS84 ellipsoid and the geoid at a given location.</li> </ul>"},{"location":"content-knowledgebase/coordinate-systems/#the-geoid","title":"The Geoid","text":"<p>The geoid is an equipotential surface of the Earth's gravity field, which corresponds to the mean sea level across the world. It represents a theoretical sea level surface that extends under the continents. The geoid is undulating due to variations in Earth's gravitational field caused by factors like:</p> <ul> <li>Mountain Ranges and Ocean Trenches: Areas with more mass (e.g., mountains) exert a stronger gravitational pull, causing the geoid to bulge upward, whereas areas with less mass (e.g., ocean trenches) cause the geoid to dip.</li> <li>Density Anomalies: Variations in the density of the Earth's interior (like magma chambers or dense rock formations) cause local gravitational anomalies that affect the geoid's shape.</li> </ul> <p></p>"},{"location":"content-knowledgebase/coordinate-systems/#geocentric-coordinate-system-ecef-earth-centered-earth-fixed","title":"Geocentric Coordinate System - ECEF (Earth-Centered, Earth-Fixed)","text":"<ol> <li>ECEF is a Cartesian coordinate system that fixes the origin at the Earth's center of mass. The axes of the system rotate with the Earth, maintaining a fixed orientation relative to the Earth's surface.</li> <li>X-axis: Points from the Earth's center to the intersection of the equator and the prime meridian (0\u00b0 longitude).</li> <li>Y-axis: Points from the Earth's center to the intersection of the equator and 90\u00b0 east longitude.</li> <li> <p>Z-axis: Points from the Earth's center to the North Pole.</p> </li> <li> <p>Applications: ECEF coordinates are used in:</p> </li> <li>Satellite Navigation: Tracking satellite positions relative to the Earth's center.</li> </ol> <p></p>"},{"location":"content-knowledgebase/coordinate-systems/#projected-coordinate-systems","title":"Projected Coordinate Systems","text":"<p>A Projected Coordinate System (PCS) is a two-dimensional plane-based system used to represent the three-dimensional surface of the Earth. Unlike a Geographic Coordinate System (GCS), which uses latitude and longitude to define locations on the Earth's curved surface, a PCS converts these locations into a flat, map-like representation through a process called map projection.</p>"},{"location":"content-knowledgebase/coordinate-systems/#projection-types","title":"Projection Types","text":""},{"location":"content-knowledgebase/coordinate-systems/#cylindrical","title":"Cylindrical","text":"<ul> <li>Projects the Earth onto a cylinder. Examples include the Mercator and Transverse Mercator projections.</li> <li>Preserves angles and shapes for small areas, widely used for nautical purposes.</li> </ul>"},{"location":"content-knowledgebase/coordinate-systems/#conic","title":"Conic","text":"<ul> <li>Projects the Earth onto a cone. Examples include the Albers Equal-Area and Lambert Conformal Conic projections.</li> <li>Preserves shapes, commonly used for aeronautical charts and mid-latitude regions.</li> </ul>"},{"location":"content-knowledgebase/coordinate-systems/#azimuthal-planar","title":"Azimuthal (Planar)","text":"<ul> <li>Projects the Earth onto a plane. Examples include the Polar Stereographic and Azimuthal Equidistant projections.</li> <li>Preserves angles, used for polar regions.</li> </ul> <p>Projected coordinate systems are based on a plane (the spheroid projected on a 2D surface) and utilize linear units such as feet, meters, etc.</p>"},{"location":"content-knowledgebase/coordinate-systems/#utm","title":"UTM","text":"<p>The Universal Transverse Mercator (UTM) is a global map projection system that divides the world into a series of zones (60 zones), each 6 degrees of longitude wide using a Transverse Mercator projection. This system provides a consistent, high-accuracy means of representing geographic coordinates on a two-dimensional plane.</p> <ul> <li>Each zone has its own coordinate system, with coordinates measured in meters.</li> <li>The central meridian of each zone is assigned a false easting of 500,000 meters to avoid negative coordinates.</li> <li>In the Northern Hemisphere, the equator is assigned a false northing of 0 meters; in the Southern Hemisphere, it is 10,000,000 meters to ensure positive coordinates.</li> </ul> <p> </p>"},{"location":"content-knowledgebase/coordinate-systems/#gauss-kruger-coordinate-system","title":"Gauss-Kr\u00fcger Coordinate System","text":"<p>The Gauss-Kr\u00fcger coordinate system is a map projection similar to the UTM system but typically used in Europe and parts of Asia. It is a transverse Mercator projection that maps a region of the Earth onto a cylinder, which is then unrolled to form a flat map. However, they have several differences in terms of their implementation, coverage, and usage.</p> Aspect Gauss-Kr\u00fcger UTM Zone Width 3 degrees 6 degrees Coverage National/regional Global Coordinate System Local Cartesian Global Cartesian False Easting Varies by country/zone 500,000 meters False Northing Varies by country/zone 0 m (N. Hemisphere), 10,000,000 m (S. Hemisphere) Applications National mapping, cadastre International mapping, GPS"},{"location":"content-knowledgebase/coordinate-systems/#references","title":"references","text":"<ul> <li>www.linz.govt.nz/guidance/geodetic-system/</li> <li>Wikipedia - World Geodetic System</li> <li>Youtube - Intro to coordinate systems and UTM projection</li> <li>Youtube - Grid Coordinate Systems and UTM</li> </ul>"},{"location":"content-knowledgebase/linux_hints_for_windows_users/","title":"Linux hints for Windows users","text":"<p>Our colleague Peter K\u00fcffner shares a few notes about avoiding issues that Windows users have, when trying out Ubuntu (e.g. by setting up a Ubuntu VM):</p>"},{"location":"content-knowledgebase/linux_hints_for_windows_users/#sshsftp-access","title":"SSH/SFTP access","text":"<ul> <li> <p>In order to be able to use PuTTY and FileZilla with Ubuntu, you need to install the <code>openssh-server</code> package via apt-get. This can be done via</p> <pre><code>sudo apt-get install openssh-server\n</code></pre> </li> <li> <p>No adjustments to the Firewall should be required after the installation. (Just note that you can't log in as root user.)</p> </li> <li>You can connect to the Ubuntu using FileZilla via SFTP with the username/password you use to log in there.     You need to explicitly specify that in the URL.     e.g. with <code>sftp://10.0.0.1/</code></li> </ul>"},{"location":"content-knowledgebase/linux_hints_for_windows_users/#getting-github-access-working","title":"Getting GitHub access working","text":"<ul> <li>You need your private SSH key on the machine.</li> <li>Then SSH key needs to be in OpenSSH format (not PuTTY's ppk).     You can use PuTTYgen to convert your PPK key into OpenSSH format (<code>Conversions</code> menu).     Note: OpenSSH \"private key\" files don't have an extension. \"Public key\" files end with .pub.</li> <li>You can transfer the key to the Ubuntu system. Copy it into <code>/home/&lt;user&gt;/.ssh/</code>.     The file should be named <code>id_rsa</code> (for \"ssh-rsa\" keys) if you don't want to do additional configuration.</li> <li> <p>The <code>id_rsa</code> file MUST have the its file permissions set to <code>-rw-------</code> (i.e. only the user itself is allowed to access the file).     You can use the command <code>chmod 600 id_rsa</code> while in the <code>.ssh</code> folder in order to set the permissions.  </p> <p>Warning</p> <p>The SSH agent will refuse to accept the key when its file permissions are not set properly!</p> </li> </ul>"},{"location":"content-knowledgebase/test_drive/","title":"Guidelines for conducting Test Drives","text":""},{"location":"content-knowledgebase/test_drive/#consider-the-following-points-when-you-go-for-a-test-drive","title":"Consider the following points when you go for a test drive","text":"<ol> <li>Write down why you are going for this test drive. What do you aim to accomplish? What do others expect? Sure you have a good idea why, but have you confirmed with others interested in this test drive? Talk with them. Try to frame a simple single line \"purpose\" and confirm this with others. This is the most important thing to consider. It may affect the way you conduct the test drive, the locations you choose to go, various settings, configurations.</li> <li>Once you have enlisted the solid reason(s), motivation(s) for the test drive, think what data you would generate and in what format. Have a clear picture of what data you want to record and how you will do it. Do you need extra tools? Is your recording fully automatic or requires manual intervention? Do you have any concerns about your tools not working? Do you need to test them first before you start the actual test drive? Think about any likely but easily unforeseen situations. For example, if you are using some sort of map service and it is possible that you might not have Internet during the test drive, then you would probably want to cache the map before you start! Also, many times the data that you generate during your test drive is going to be volume intensive. So try to record data (for example your log files) in a way that it is easy to programatically read and parse it.</li> <li>Do you have any special requirements in the test drive? Should the car go through tunnels? Does the car need to be on a busy street or a highway? If there are such special requirements, make sure you talk about it with the person driving the car beforehand. Ideally, you should have a route prepared already.</li> <li>Might be beneficial to create small tables or text files in which you type in various kinds of details during the test drive. You should keep a \"diary style\" or \"minutes of meeting\" style record of the things that happen during the test drive. This could come in very handy.</li> <li>To sum it up shortly, be ready with a detailed \"test drive plan\" and have someone look at it before the test drive. Communicate with your driver about your objectives from the test drive and try to gather as much information as possible and try to make it easier for you do so (better organization, automation, tools).</li> </ol>"},{"location":"content-knowledgebase/writing_readme/","title":"Writing effective ReadMe for any project","text":"<p>A README is a text file that introduces and explains a project. It contains information about other files in a project or archive of computer software. [Source: Wikipedia].</p> <p>Enlisted here are some points which are intended to help new user to write effective readme files for their projects.</p>"},{"location":"content-knowledgebase/writing_readme/#adding-images-and-gifs-to-your-readme","title":"Adding images and gifs to your readme","text":"<ul> <li>Pictures and gifs are a great way to add substantial value to your readme, making it very easy to provide instant context to what problem your software solves, or how. A short demonstration can also be generally included in the readme via a gif. Below are some guidelines which can help you to add better value minus the clutter.</li> <li>Your picture should be on point. It should not contain anything else that may confuse the reader. For example, if you want to show a camera, then having a laptop in the same picture as the camera may lead the reader to believe that perhaps the laptop is also needed for the operation of the camera. Be mindful of this fact.</li> <li>Environment of the image or gif should be consistent with the purpose of the project. For example, if your project is about using computer vision on vehicles, then your demonstration should use vehicles (and not apples for example).</li> <li>When showing a demostration, it would be nice to have a textual prompt somewhere on the screen which \"narrates\" the demonstration to the reader. Note that gifs don't have sound.</li> <li>Sometimes you may be tempted to use a picture where a simple diagram might suffice. Don't forget to use the \"simplest way first\". Don't use a picture where a diagram would be enough.</li> <li>Always aim for easier, faster and better understanding of the reader when you embed images or gifs to your readme.</li> <li>The images or gifs that you use, should in no way divulge any personal information or any identification of instruments, tools, infrastructure in any way. Do not overlook privacy concerns of not just yourself, but others as well.</li> </ul>"},{"location":"content-onboarding/KATA/","title":"Working with Toyota KATA workflow","text":"<p>Toyota Kata is a systematic approach for developing continuous improvement habits that stick. The Toyota Kata framework turns scientific thinking into a practical skill anyone, and any organization, can learn through the deliberate practice of a four-step learning and discovery process. By following the Toyota Kata structure, we will elegantly move from our current state to our desired future state.</p> <p>More information on KATA workflow can be found online.</p>"},{"location":"content-onboarding/KATA/#quick-reads","title":"Quick reads","text":"<ol> <li>https://www.gembaacademy.com/resources/gemba-glossary/kata</li> <li>https://www.lean.org/the-lean-post/articles/the-toyota-way-and-toyota-kata-how-do-they-fit/</li> <li>Toyota Kata: Empowering Employees for Target-Oriented Improvement- A Best Practice Approach</li> </ol>"},{"location":"content-onboarding/KATA/#more-detailed-explanations","title":"More detailed explanations","text":"<ol> <li>Complete KATA Guide, University of Michigan.</li> <li>Toyota KATA, by Mike Rother</li> </ol>"},{"location":"content-onboarding/KATA/#youtube","title":"YouTube","text":"<ol> <li>The Improvement Kata Mindset</li> <li>About the Toyota Kata Research</li> <li>Introduction to Toyota Kata</li> </ol>"},{"location":"content-onboarding/Marvin/","title":"Marvin Bot","text":"<p>Marvin is a GitHub Application that can help to automate certain aspects of our work on and beyond GitHub. Currently it offers the following functions:</p> <ol> <li>Kata Issue Handling</li> <li>Reminders</li> </ol> <p>These functions are explained below.</p>"},{"location":"content-onboarding/Marvin/#1-kata-issue-handling","title":"1. Kata Issue Handling","text":"<p>The bot automatically parses any new issue created for an expected structure. This structure consists of a divider <code>---</code> followed by two fields <code>**due**: YYYY-MM-DD</code> and <code>**supervisor**: @supervisor</code>. The two fields might appear in any order, there might be any number of empty lines in between and additional, unrelated dividers are also accepted. A concise example looks like this:</p> <pre><code>This is a target condition. We want to reach the following state:\n\n\n- [ ] something is running\n- [ ] something else finally broke as expected\n\n\n---\n\n\n**due**: YYYY-MM-DD\n**supervisor**: @supervisor\n</code></pre> <p>Once a valid target condition has been detected, the bot will post a timeline-comment. This is usually the first post. It will visualise the timeline of changes. When a due date has expired, the bot will post a friendly reminder asking the author to adjust the due date in the first post. This can be done by editing the first issue and changing the due date. Finally, when the target condition is closed the bot will post a summary.</p>"},{"location":"content-onboarding/Marvin/#2-reminders","title":"2. Reminders","text":"<p>Sometimes it is useful to get back to issues in after a certain time to re-evaluate. This can be achieved by leveraging marvins command syntax. Each marvin command starts with <code>/marvin</code> followed by a specific sub-command, in this case <code>remind</code>. When a command has been parsed correctly, marvin will set a \"eyes\" reaction to indicate that the reminder has been set. On the early morning of the reminder date (UTC), marvin will post a comment and mention the attributed user.</p> <p>Examples</p> <p>First lets look at some examples, they should be fairly self-explanatory:</p> <pre><code>/marvin remind me in 2 days\n/marvin remind me in 3 weeks\n/marvin remind me in 4 months\n/marvin remind me on 2023-01-18\n/marvin remind @plihub in 1d\n/marvin remind @plihub in 2w\n/marvin remind @plihub in 3m\n</code></pre> <p>Syntax</p> <p>The more formal syntax is:</p> <pre><code>/marvin remind &lt;attribution&gt; &lt;date&gt;\n</code></pre> <p>where:</p> <ul> <li><code>attribution</code> is either \"me\" or any github user handle starting with an \"@\"</li> <li><code>date</code> is either the word \"on\" followed by an <code>&lt;absolute date&gt;</code> or  the word \"in\" followed by a <code>&lt;relative date&gt;</code><ul> <li><code>absolute date</code> is a date in the form of YYYY-MM-DD</li> <li><code>relative date</code> is a number followed by either a <code>&lt;day&gt;</code>, <code>&lt;week&gt;</code> or <code>&lt;month&gt;</code> identifier<ul> <li><code>day</code> is either \"day\", \"days\" or \"d\"</li> <li><code>week</code> is either \"week\", \"weeks\" or \"w\"</li> <li><code>month</code> is either \"month\", \"months\" or \"m\"</li> </ul> </li> </ul> </li> </ul>"},{"location":"content-onboarding/hiwi/","title":"Working as student assistant (HiWi) in our team","text":"<p>Experienced students will be offered a job as student assistant (undergraduate research assistant) in our team. This paid work comes with great responsibilities since it is most of the time embedded into \"real projects\" :).</p> <p>It is a big opportunity for you (the student) to learn more about how to do research and apply the skills you have been taught in the lectures.</p> <p>We are very happy to have you as undergraduate research assistant in our team. Most of the researchers in our team started the same way many years ago. Research is hard - but it can be a lot of fun and a rewarding work.</p>"},{"location":"content-onboarding/hiwi/#prepare-your-documents-for-the-contract","title":"Prepare your documents for the contract","text":"<p>Again :): A job as undergraduate research assistant comes with great responsibilities.</p> <p>If you have been offered a contract, our secretary (Ms. Stark, Weinholdbau Room 406) will contact you by email. She will ask you to prepare paperwork and drop by to sign the contract.</p> <p>Please respond to her emails within one business day.</p> <p>If you do reply on time:</p> <ul> <li>the secretary will finalize the paperwork and forwards it to the professor and the HR department of the university</li> <li>the contract will become valid, you can start to work and get paid</li> </ul> <p>If you do not reply on time:</p> <ul> <li>your supervisor will be informed about you not responding</li> <li>the contract procedure will be delayed and deadlines will be missed</li> <li>since there is a tight schedule with predefined days for deadlines this means that the contract can and will not be signed by the professor and the HR department</li> <li>since the deadlines have been missed the prepared paperwork becomes invalid - automatically</li> <li>the procedure will be stopped and another student will be given the opportunity to apply for this position</li> </ul>"},{"location":"content-onboarding/hiwi/#how-to-fill-the-timesheet","title":"How to fill the Timesheet","text":"<p>Student assistants need to fill timesheets.</p> <ul> <li>Applicable to: All students working on a HiWi job for 60 or below hours/month.</li> <li>Where to find?: Timesheet for Microsoft Office, for Open Office</li> <li>How to fill?:<ul> <li>Fill the timesheet of the respective month with your Name, Total working hours (as per contract), actual daily working hours and signature .</li> <li>Note the rules specified in the excel.</li> <li>Working hour value of a single stretch should not exceed 4 hours.</li> <li>Do not modify the values already present in the excel that are specified against the holidays.</li> </ul> </li> <li>How to submit?: Get the Timesheet verified by your supervisor and submit it to the Secretary on time (Weinholdbau Room 406)</li> </ul>"},{"location":"content-onboarding/hiwi/#get-a-tuc-user-account","title":"Get a TUC user account","text":"<p>This is relevant for students enrolled at an institution different from TU Chemnitz</p> <p>In order to access Gitlab you will need a TU Chemnitz account. It is also useful to access resources available only from within the university network via VPN. You can get an account at the Universit\u00e4tsrechenzentrum (URZ) if you are enrolled at any other German university. Just got to one of their offices (adresses and opening hours are found here) and bring your ID or passport, student ID and your matriculation certificate. An account will then immediately be assigned and activated for the time of your matriculation certificate being valid. The account can be extended if you always send them your new matriculation certificate before the start of the semester.</p>"},{"location":"content-onboarding/hiwi/#how-to-do-research","title":"How to do research","text":"<p>You are working in a research lab now. Bill Freeman\u2019s very true article describes what that means:</p> <p>How to do research, March 6, 2013 Bill Freeman, CSAIL, MIT</p>"},{"location":"content-onboarding/hiwi/#cross-cultural-communication","title":"Cross-Cultural communication","text":"<p>Are you wondering about the German business and working culture? This guide from the Deutsche Gesellschaft f\u00fcr Internationale Zusammenarbeit \\(GIZ\\) provides some insights:</p> <p>Cross-Cultural Management: How to Do Business with Germans - A Guide \u2013</p>"},{"location":"content-onboarding/hiwi/#faq","title":"FAQ","text":"<p>Q: How do I get a contract as undergraduate research assistant?</p> <p>A: You can check the vacant positions which are announced by the university Career Service. You can ask your professor. If a student shows outstanding results in the lectures he might get offered a contract.</p> <p>Unfortunately there are only a limited number of positions available for undergraduate research assistants. The positions are very popular because it is an opportunity for young people to get in touch with cutting edge problems and topics which go beyond state of the art.</p> <p>The easiest way to get a contract is to start working with a research group you find interesting by showing outstanding results in the research project or practical trainings. Show and prove passion as early as possible, which is right from the first semester.</p>"},{"location":"content-onboarding/onboarding/","title":"Prepare your work environment","text":"<p>Help us to improve this guide. Practice the GitHub workflow by improving or by adding something to this guide.</p> <p>Hint</p> <p>Every student of our team should contribute with at least two commits to this guide to make it better and to extend it. The easiest way is to look for problems you have with our onboarding process. Identify missing or incomplete pieces in this guide and improve it using the forking workflow. Additionally, choose one issue from the issue tracker of this project and solve it. Thank you \ud83d\udc4d</p>"},{"location":"content-onboarding/onboarding/#system-requirements","title":"System requirements","text":"<p>In order to install and use our tools, you need one of the following platforms:</p> <ul> <li>Windows 10 (Intel 64-bit) or higher</li> <li>Ubuntu 22.04 (Intel 64-bit) or higher</li> </ul>"},{"location":"content-onboarding/onboarding/#secure-your-laptop-or-notebook-computer","title":"Secure your laptop or notebook computer","text":"<p>Some of you will be provided with a notebook computer. This happens if you are an experienced member of the student team or if you are working remotely.</p> <p>To support your individual needs, we provide you with the maximum flexibility to configure the computer. At the same time, we kindly ask you to use this freedom responsibly and to follow these guidelines:</p> <ul> <li>Install a clean Windows 10 or Linux Ubuntu operating system.</li> <li>Encrypt the hard disk (HDD/SSD) and all partitions. This is essential to protect both your data and our data in case the computer is lost.<ul> <li>Windows: Use Bitlocker or VeraCrypt</li> <li>Linux: Use Full disk Encryption</li> <li>Windows / Ubuntu dual boot: Bitlocker and encrypted Ubuntu system partition</li> </ul> </li> <li>Fully encrypt all USB flash drives and external hard drives.</li> <li>Backup your system and data regularly (daily backups recommended).</li> </ul> <p>Hint</p> <p>BitLocker is available on Windows Pro, Pro Education, Enterprise (E3/E5) and Education (A3/A5) editions only.</p> <p>Setup Bitlocker on Windows 10:</p> <ul> <li>Go to Control Panel -&gt; System and Security -&gt; BitLocker Drive Encryption.</li> <li>Select the drive you want to encrypt.</li> <li>Turn on BitLocker and set a strong password.</li> <li>Important: Backup your Recovery Key.</li> </ul> <p></p>"},{"location":"content-onboarding/onboarding/#install-the-following-tools","title":"Install the following tools","text":"<p>This also applies if you use your own computer.</p>"},{"location":"content-onboarding/onboarding/#windows","title":"Windows","text":"<ul> <li>IDE for software development and debugging: Visual Studio Code</li> <li>Install the following extensions in VSCode:<ul> <li>Markdownlint to edit \\(.md\\) files</li> <li>GitHub Pull Requests as Git client</li> </ul> </li> <li>If you need to write JavaScript code and you don't have a good JS IDE available yet, consider one of the followings:<ul> <li>Visual Studio Ultimate Edition</li> <li>Webstorm</li> </ul> </li> <li>Install CMake</li> <li>Install Git</li> </ul>"},{"location":"content-onboarding/onboarding/#linux","title":"Linux","text":"<ul> <li>IDE for software development and debugging: Visual Studio Code</li> <li>Webstorm (if you need to write JavaScript)</li> <li>Editing markup \\(.md\\) files: Visual Studio Code</li> <li>Git client: A console-based Git client should already be on your system. (called <code>git</code>)   If you want a GUI, you can try installing <code>git-gui</code> or use the CLion plugin \"Git Integration\". (You do not need the GitHub or GitLab plugins.)</li> <li>Use your system's package manager to install CMake. There is a curses based terminal GUI and a Qt based GUI.</li> </ul>"},{"location":"content-onboarding/onboarding/#macos","title":"macOS","text":"<ul> <li>IDE for software development and debugging: Visual Studio Code.</li> <li>Visual Studio Code for editing markdown files (<code>.md</code>).</li> <li>If you need to write JavaScript: WebStorm.</li> <li>Git is typically pre-installed on macOS. Verify by opening Terminal and typing <code>git --version</code>.<ul> <li>If not installed, install Xcode Command Line Tools, which includes Git.</li> </ul> </li> <li>Install Homebrew (for package management) and use homebrew to install CMake.</li> </ul>"},{"location":"content-onboarding/onboarding/#prepare-for-github-access","title":"Prepare for GitHub access","text":"<p>For a detailed understanding of GitHub access with SSH keys go to this link in the GitHub docs.</p>"},{"location":"content-onboarding/onboarding/#windows_1","title":"Windows","text":""},{"location":"content-onboarding/onboarding/#generate-ssh-keys","title":"Generate SSH keys","text":"<ul> <li>Open a Windows PowerShell</li> <li>Type <code>ssh-keygen -t ed25519 -C \"ssh-key-TUC\"</code></li> <li>The command prompt will ask for a file name and passphrase: Keep it empty and press enter until you see the following statement;</li> <li><code>Your identification has been saved in C:\\Users\\...\\.ssh\\id_ed25519</code></li> </ul>"},{"location":"content-onboarding/onboarding/#configure-your-ssh","title":"Configure your SSH","text":"<ul> <li>Open Windows PowerShell.</li> <li> <p>Navigate to your <code>.ssh</code> directory:</p> <pre><code>cd C:\\Users\\&lt;YourUsername&gt;\\.ssh\n</code></pre> </li> </ul>"},{"location":"content-onboarding/onboarding/#create-ssh-config-file","title":"Create SSH Config File","text":"<ul> <li> <p>Create an empty text file named <code>config</code> (without any file extension).</p> <pre><code>echo \"# This is sample text\" &gt; config\n</code></pre> </li> <li> <p>Open the <code>config</code> file using a text editor and add the following content:</p> <pre><code># github.com account\nHost github.com\n    HostName github.com\n    User INSERT-YOUR-USERNAME-HERE\n    IdentityFile ~/.ssh/id_ed25519\n</code></pre> </li> <li> <p>Save and close the file (without any file extension). Make sure to use \"UTF-8\" encoding system when editing the file, this can be done using Notepad++ or in Visual Studio click on the encoding system right bottom &gt; Save with encoding &gt; UTF-8 .</p> <p>Hint</p> <p>It is recommended to use Notepad++, Visual Studio Code, or Notepad to view the files. The files contain both the key and the key title.</p> </li> <li> <p>Next, log in to your GitHub account and go to: Settings \u2192 SSH and GPG keys \u2192 New SSH key</p> <ul> <li>Paste the SSH key into the Key field.  </li> <li>Enter a descriptive title in the Title field (e.g., \"ssh-key-TUC\")</li> </ul> </li> </ul> <p>(For detailed steps, refer to the section Deploy SSH Public Key to GitHub below)</p> <p>Note: You can ignore the message:  \"Before you can add an SSH key, you need to generate it.\"  \u2014 You have already created your SSH key.</p>"},{"location":"content-onboarding/onboarding/#linux-works-for-macos-as-well","title":"Linux (works for MacOS as well)","text":""},{"location":"content-onboarding/onboarding/#generate-ssh-keys_1","title":"Generate SSH keys","text":"<ul> <li>Create a public/private key pair using the <code>ssh-keygen</code> command-line tool.   It is recommended to use the default paths for the keys.</li> <li>On Ubuntu, it might be necessary to run <code>ssh-add</code> to add your SSH key. For more details, refer to this Stack Overflow article.</li> </ul>"},{"location":"content-onboarding/onboarding/#deploy-ssh-public-key-to-github","title":"Deploy SSH Public Key to GitHub","text":"<ul> <li>Go to SSH keys settings in GitHub.</li> <li>Click on <code>New SSH key</code> button.</li> <li>Enter <code>Title</code> of your choice (e.g. <code>ssh-key-TUC</code>).</li> <li>Set <code>Key Type</code> as <code>Authentication Key</code>.</li> <li>Paste your public key from the file that was generated (<code>C:\\Users\\...\\.ssh\\id_ed25519.pub</code>) into the <code>Key</code> field.</li> <li> <p>Incase you are not sure what the key is, open a command prompt and type</p> <ul> <li> <p>in a Linux shell:</p> <pre><code>cat ~/.ssh/id_ed25519.pub\n</code></pre> </li> <li> <p>or in a Windows PowerShell:</p> <pre><code>Get-Content ~\\.ssh\\id_ed25519.pub\n</code></pre> </li> </ul> </li> <li> <p>You will see a key starting with <code>ssh-ed25519 ...</code> and ending with <code>ssh-key-TUC</code>. Ensure you copy the entire key and paste it into the Key field.</p> </li> <li>Click on the <code>Add SSH Key</code> button.</li> </ul> <p></p>"},{"location":"content-onboarding/onboarding/#test-your-ssh-key-setup","title":"Test your SSH key setup","text":"<ul> <li>Open Windows Powershell OR Linux terminal bash</li> <li>Type <code>ssh -T git@github.com</code></li> <li>Agree to add github.com to the list of trusted hosts</li> <li>Run the above command once more, and you should only receive a Hi USERNAME! You've successfully authenticated, but GitHub does not provide shell access. message.</li> </ul> <p>If the welcome message doesn't appear, run SSH's verbose mode by replacing <code>-T</code> with <code>-vvvT</code> to understand where the error is.</p> <p>Guide for test your SSH connection is here</p>"},{"location":"content-onboarding/onboarding/#additional-steps","title":"Additional Steps","text":"<ul> <li>Install Miniconda \\(based on Python 3\\) by following the Conda How-To and install the most important dependencies.</li> <li>Create an avatar for your GitHub account and add it to your GitHub profile.</li> </ul>"},{"location":"content-onboarding/onboarding/#prepare-for-software-version-control","title":"Prepare for software version control","text":"<p>Please read and follow the instructions carefully!</p> <p>The GitHub workflow used by our team...</p>"},{"location":"content-onboarding/onboarding/#meeting-and-communication-with-your-supervisor","title":"Meeting and communication with your supervisor","text":"<p>Meet with your supervisor regularly. For each meeting, please adhere to the following guidelines:</p> <ul> <li>Always bring a paper notebook (as outlined below).</li> <li>Always bring your laptop.</li> <li>Be well-prepared to explain:<ul> <li>What tasks you were assigned.</li> <li>What results you have achieved.</li> <li>How you solved any challenges.</li> <li>What the next steps are.</li> </ul> </li> <li>Arrive on time. If you anticipate being late, immediately contact your supervisor via phone, a signal message or SMS.</li> </ul> <p>In addition to email, most of our team uses encrypted messaging. Please consult your supervisor which encrypted messaging platform to use, or feel free to install both.</p> <ul> <li>Primary: Element - Secure communications platform</li> <li>Backup: Signal messenger</li> </ul>"},{"location":"content-onboarding/onboarding/#write-down-all-your-findings","title":"Write down all your findings","text":"<p>Please use an old-school paper notebook \\(minimum size: DIN A5\\) to write down your tasks, findings, ideas, results. Do not use notebooks where sheets can easily come off nor single sheets of paper. They get lost easily. Have this notebook ready during your work and in our meetings.</p> <p></p>"},{"location":"content-onboarding/onboarding/#how-to-develop-software-with-less-pain","title":"How to develop software with less pain","text":"<p>Read the PC3 file which describes the rules of software development our team chose to follow.</p>"},{"location":"content-onboarding/onboarding/#recommended-programming-books","title":"Recommended programming books","text":"<p>We are a polyglot programming team. We are OK with using multiple languages and we try to use the right tool for the job.</p> <p>Since we focus on algorithm development, the C++ language is our primary choice for fast and powerful code.</p> <p>Just \"googling\" is not enough to become a good programmer! Read some good books:</p> <p>Basic</p> <ul> <li>Programming: Principles and Practice Using C++ \\(Bjarne Stroustrup\\)</li> </ul> <p>Advanced</p> <ul> <li> <p>Effective C++: 55 Specific Ways to Improve Your Programs and Designs \\(Scott Meyers\\) \\(read this book *before* you read \"Effective Modern C++\"\\)</p> </li> <li> <p>Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14 \\(Scott Meyers\\)</p> </li> <li> <p>Design Patterns \\(Erich Gamma\\) and here</p> </li> </ul>"},{"location":"content-onboarding/onboarding/#how-to-do-research","title":"How to do research","text":"<p>You are working in a research lab now. Bill Freeman's very true article describes what that means:</p> <p>How to do research, March 6, 2013 Bill Freeman, CSAIL, MIT</p>"},{"location":"content-onboarding/onboarding/#cross-cultural-communication","title":"Cross-Cultural communication","text":"<p>Are you wondering about the German business and working culture? This guide from the Deutsche Gesellschaft f\u00fcr Internationale Zusammenarbeit \\(GIZ\\) provides some insights:</p> <p>Cross-Cultural Management: How to Do Business with Germans - A Guide \u2013</p>"},{"location":"content-onboarding/onboarding/#faqs","title":"FAQs","text":"<p>Q: I have seen that some students do not follow the userguide. For example some do not have an avatar. How should I proceed in that way? Should I follow the userguide or should I do what other students are doing / not doing?</p> <p>A: Please follow the userguide. If you don't understand some contents, ask your supervisor and help to improve the guide.</p> <p>If other students behave different from the workflow described in the userguide ask them why they do so. If they provide a reasonable explanation, discuss with your supervisor.</p> <p>Some students do not follow the userguide because they do not know it or they decided to ignore it. Do not worry about it.</p> <p>In order to become smarter, we do not recommend you to ignore the hints we are providing in the userguide.</p> <p>The userguide is the only source of truth during the onboarding process.</p> <p>Q: My work follows the target condition (TC) method. Since I work very hard, I do not have time to update the target condition. What should I do?</p> <p>A: Updating the target condition is part of your work and the target condition itself. You should take into account the additional time when estimating your due date. The past has shown that successful students need only 5..10 minutes to update their target condition.</p> <p>Q: What should I do when I realize that I will miss the due date of my target condition?</p> <p>A: When you realize that you will miss your due date, please do as follows:</p> <ul> <li>Describe in the issue why you will miss the due date before the due date has passed<ul> <li>Why was your estimate wrong, what happened.<ul> <li>Pro tip: try to be honest to yourself: if you have bad time management, say it ... and improve it.</li> </ul> </li> <li>What will you do to have a better estimate next time.</li> <li>Estimate a new due date and update the TC issue.</li> <li>Inform your supervisor that you will miss the due date and that you have updated the issue.</li> </ul> </li> </ul> <p>Q: I do not know how to estimate the due date. What should I do?</p> <p>A: Every student in our team should be able to estimate the amount of time he/she needs to reach a target condition (finish a task). If you have problems estimating the time, choose a smaller target condition. A one day duration is a good start.</p>"},{"location":"content-onboarding/working-with-GitHub/","title":"Working with GitHub","text":"<p>GitHub, Inc. is a platform and cloud-based service for software development and version control using Git, allowing developers to store and manage their code. It provides the distributed version control of Git plus access control, bug tracking, software feature requests, task management, continuous integration, and wikis for every project.</p> <p>Git is a version control system (VCS) for tracking changes in computer files and coordinating work on those files among multiple people. It is primarily used for software development. [Source: Wikipedia].</p>"},{"location":"content-onboarding/working-with-GitHub/#how-to-do-good-source-control","title":"How to do good source control","text":"<ul> <li>version control your source code</li> <li>read https://www.troyhunt.com/10-commandments-of-good-source-control/<ul> <li>focus on 2-6 and 8-9</li> <li>ignore 1, 7, 10 for now</li> </ul> </li> </ul>"},{"location":"content-onboarding/working-with-GitHub/#tools-and-ide-integration","title":"Tools and IDE integration","text":""},{"location":"content-onboarding/working-with-GitHub/#windows","title":"Windows","text":"<p>Most of our colleagues use SourceTree as version control GUI. (Also available for Mac OS X.)</p> <p>Sourcetree is a sofware solution still recommended for windows to provide a git graphical interface. It allows to connect to git repositories to easily perform all necessary git related tasks. it is a simple and user friendly which makes life of git users easier.  </p> <p>You are free to use other tools like command line or TortoiseGit but we cannot provide support for these tools.</p>"},{"location":"content-onboarding/working-with-GitHub/#linux","title":"Linux","text":"<p>Most Linux users use the Git command line or the git client for CLion</p>"},{"location":"content-onboarding/working-with-GitHub/#forking-workflow","title":"Forking workflow","text":"<p>We use \"forking workflow.\" Please read</p> <ul> <li>https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow</li> <li>http://blog.scottlowe.org/2015/01/27/using-fork-branch-git-workflow/</li> </ul> <p></p> <ul> <li> <p>Fork the repository which was given to you by your supervisor (later called \"upstream\") using the web interface. A valid fork name should not include special characters e.g. \" ' \".</p> </li> <li> <p>This new fork will be your personal fork of the upstream project. This new fork will be called your \"origin\".</p> </li> <li> <p>Clone your personal fork (origin) to your harddrive using Git/Sourcetree. The SSH Path to your origin can be found in the web interface (as shown in the following screenshot). This will be your working directory. Please commit and push regularly!</p> </li> </ul> <p>Info</p> <p>If you are using git-bash, use insert button to paste the SSH path after copying it to clipboard.</p> <p></p> <ul> <li> <p>To submit your code to the upstream repository, create a pull request from your personal fork in the web interface</p> </li> <li> <p>if you need to update your personal fork from the project it was created from, do a \"pull from upstream\" \u2192 https://help.github.com/articles/merging-an-upstream-repository-into-your-fork/</p> </li> </ul> <p>Danger</p> <p>Never use spaces in folder or filenames.</p>"},{"location":"content-onboarding/working-with-GitHub/#commits-and-pull-requests","title":"Commits and pull requests","text":"<p>Please follow PC3 for commits and pull requests.</p> <p>A proper pull request MUST follow Problem:/Solution: syntax and solve only one small problem.</p> <p>The title of PR MUST contain a definition of the current problem (\"Problem: ...\"). The proposed solution (\"Solution: ...\") MUST be written in the description field of PR.</p> <p>Important</p> <p>Merging is only done by SUPERVISORS! That means: when you're asked to upload files or update a repository, DO NOT MERGE, but only create a Pull Request and assign it to your supervisor so that they can merge it after checking it. So please only follow the WORKFLOW mentioned previously!</p> <p></p>"},{"location":"content-onboarding/working-with-GitHub/#bad-and-good-examples","title":"Bad and good examples","text":"<p>Info</p> <p>The example pictures below are from GitLab, but the concepts are equally applicable to GitHub.</p>"},{"location":"content-onboarding/working-with-GitHub/#pull-requests-with-wrong-title-and-too-much-code-see-below","title":"Pull Requests with wrong title and too much code (see below)","text":""},{"location":"content-onboarding/working-with-GitHub/#commits-with-unclear-content-description","title":"Commits with unclear content description","text":""},{"location":"content-onboarding/working-with-GitHub/#commits-of-pr-solving-multiple-problems-and-pr-with-too-much-code","title":"Commits of PR solving multiple problems and PR with too much code","text":""},{"location":"content-onboarding/working-with-GitHub/#pushing-to-a-repository-with-2fa-2-factor-authentication","title":"Pushing to a repository with 2FA (2 Factor Authentication)","text":"<p>While pushing to a repository on which 2FA is enabled, you will be asked for a Personal Access Token. The procedure on how to create a PAT is described here. Once a PAT is created, please save the PAT somewhere safe (you will not be able to view it a second time) and use the same instead of your password.</p>"},{"location":"content-onboarding/working-with-GitHub/#issues-and-issue-tracker","title":"Issues and issue tracker","text":"<p>Use the issue tracker to discuss issues and ideas with your colleagues.</p> <p>Avoid to discuss issues via Email (others can not join easily).</p> <p>Start each issue with \"Problem:\" in the title and describe the problem in the description.</p>"},{"location":"content-onboarding/working-with-GitHub/#example-for-good-issue-handling","title":"Example for good issue handling","text":""},{"location":"content-onboarding/working-with-GitHub/#provide-your-real-full-name-and-create-an-avatar","title":"Provide your real full name and create an avatar","text":"<p>provide your real full name in your profile settings.</p> <ul> <li>https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#changing-your-profile-name</li> </ul> <p>Please give your GitHub profile an Avatar or suitable photo.</p> <ul> <li>https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#changing-your-profile-picture</li> </ul> <p>In computing, an avatar is the graphical representation of the user or the user's alter ego or character.</p> <p>There are Avatar generators available:</p> <ul> <li>http://avatarmaker.com/</li> <li>http://www.pcworld.com/article/172320/article.html</li> </ul>"},{"location":"content-onboarding/working-with-GitHub/#faq","title":"FAQ","text":"<p>Q: When and how often should I commit my code?</p> <p>A: Your first commit is done right after you have created the basic frame for your code. For example right after your IDE has created the basic code.</p> <p>After that you should commit regularly. Usually this is done every some hours.</p> <p>You can not commit too often!</p> <p>Q: What do you mean with Problem/Solution statement according to PC3 in the pull requests?</p> <p>A: A pull request contains a solution to a single and small problem. You need to name the problem and its solution in the PR.</p> <p>A problem description does not start with to.</p> <p>Just think about how you would continue this sentence: My problem is, that ...</p> <p>Example - incorrect:</p> <pre><code>Problem: to make a function which prints to console\nSolution: write a cout function\n</code></pre> <p>Example - correct:</p> <pre><code>Problem: the result of the mean algorithm needs to be shown to the user\nSolution: add cout function whichs prints the mean algorithm result to console\n</code></pre> <pre><code>Problem: I do not know whether algorithm a is faster than algorithm b\nSolution: compare the processing time of algorithm a and b\n</code></pre> <pre><code>Problem: I need a starter app for the new project\nSolution: create one\n</code></pre> <p>Q: What is upstream?</p> <p>A: Upstream describes the origin of your personal fork. This (the upstream) is the master everybody is merging their work into. You only pull from upstream, you never push to upstream directly.</p> <p>SourceTree: (Windows only)</p> <ul> <li>to pull from upstream you need to define upstream in SourceTree first</li> <li>go to <code>Repository</code> -&gt; <code>Repository Settings</code></li> <li>you should see a path to your personal fork, named origin</li> <li>click <code>Add</code></li> <li>in <code>Remote Name</code> type upstream</li> <li>in <code>URL / Path</code> type the URL of the project you created (forked) your personal fork from</li> <li>click <code>OK</code></li> <li>if you want to pull from upstream select <code>Pull</code></li> <li>choose upstream in <code>Pull from remote</code></li> </ul> <p>Git command line: (Windows/Linux)</p> <ul> <li>Type <code>git remote -v</code> to view the URL of your personal fork, named origin.</li> <li> <p>Add the upstream using this command:</p> <pre><code>git remote add upstream &lt;URL-of-upstream-project&gt;\n</code></pre> </li> <li> <p>You can use this command in order to pull from upstream into your local repository:</p> <pre><code>git pull upstream master\n</code></pre> </li> </ul> <p>Q: HTTPS access to a repository does not seem to work for TUC hosted repositories?</p> <p>A: Since the URZ decided to disable HTTPS access, we have to use Git's defaults authentication: SSH.</p> <p>Unfortunately this process, which is standard in Linux, is not very well supported under Windows at the moment. This situation is about to change in upcoming versions of Windows 10/Visual Studio 2015 Update 3. Until then we will use SourceTree or TortoiseGit with Putty SSH keys and the Tgit plugin for Visual Studio.</p>"},{"location":"content-ops/PC3/","title":"Code construction contract - our software development rules","text":""},{"location":"content-ops/PC3/#pc3-pedantic-code-construction-contract","title":"PC3 - Pedantic Code Construction Contract","text":"<p>The Pedantic Code Construction Contract (PC3) is an evolution of the GitHub Fork + Pull Model, and the ZeroMQ C4.1 process, aimed at providing an optimal collaboration model for commercial software projects. PC3 helps an organization build consistently good software, cheaply, and rapidly.</p> <ul> <li>Name: DioneCG/rfc:001/PC3</li> <li>Editor: Matthias Gabriel, Philipp Lindner. Original: Pieter Hintjens</li> <li>Status: stable</li> </ul>"},{"location":"content-ops/PC3/#language","title":"Language","text":"<p>The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119 [1].</p> <p>The key word \"patch\" in this document is to be interpreted as \"merge request\" in GitLab terms.</p>"},{"location":"content-ops/PC3/#goals","title":"Goals","text":"<p>PC3 is meant to provide an optimal collaboration model for commercial software projects. Broadly, PC3 helps an organization build consistently good software, cheaply, and rapidly. It has these specific goals:</p> <ul> <li>To maximize the scale of the community around a project, by reducing the friction for new Contributors and creating a scaled participation model with strong positive feedbacks;</li> <li>To relieve dependencies on key individuals by separating different skill sets so that there is a larger pool of competence in any required domain;</li> <li>To allow the project to develop faster and more accurately, by increasing the diversity of the decision making process;</li> <li>To support the natural life-cycle of project versions from experimental through to stable, by allowing safe experimentation, rapid failure, and isolation of stable code;</li> <li>To reduce the internal complexity of project repositories, thus making it easier for Contributors to participate and reducing the scope for error.</li> <li>To reduce the need for meetings, face-to-face presence, and timezone synchronization, by capturing knowledge more accurately.</li> <li>To optimize the efficiency of worker resources, by using on-time self-assignment instead of up-front task allocation.</li> </ul>"},{"location":"content-ops/PC3/#preliminaries","title":"Preliminaries","text":"<ul> <li>The project SHALL use the git distributed revision control system.</li> <li>The project SHALL be hosted on GitLab or equivalent, herein called the \"Platform\".</li> <li>The project SHALL use the Platform issue tracker.</li> <li>The project SHOULD have clearly documented guidelines for code style.</li> <li>A \"Contributor\" is a person who wishes to provide a patch, being a set of commits that solve some clearly identified problem.</li> <li>A \"Maintainer\" is a person who merge patches to the project. Maintainers are not developers; their job is to enforce process.</li> <li>A \"Reviewer\" is a person who reviews patches and who has deep familiarity with the code base.</li> <li>Contributors SHALL NOT have commit access to the repository unless they are also Maintainers.</li> <li>Maintainers SHALL have commit access to the repository.</li> <li>Reviewers SHALL NOT have commit access to the repository unless they are also Maintainers.</li> <li>Everyone, without distinction or discrimination, SHALL have an equal right to become a Contributor under the terms of this contract.</li> <li>The language for written statements SHOULD be English.</li> </ul>"},{"location":"content-ops/PC3/#patch-requirements","title":"Patch Requirements","text":"<ul> <li>Maintainers, Contributors and Reviewers MUST have a Platform account and SHOULD use their real names or a well-known alias.</li> <li>A patch SHOULD be a minimal and accurate answer to exactly one identified and agreed problem.</li> <li>A patch MUST adhere to the code style guidelines of the project if these are defined.</li> <li>A patch MUST adhere to the \"Evolution of Public Contracts\" guidelines defined below.</li> <li>A patch MUST compile cleanly and pass project self-tests on at least the principle target platform.</li> <li>A patch commit message MUST consist of a single short (less than 50 characters) line stating the problem (\"Problem: ...\") being solved, followed by a blank line and then the proposed solution (\"Solution: ...\").</li> <li>The build process MUST use the CI/CD pipeline.</li> <li>A \"Correct Patch\" is one that satisfies the above requirements.</li> </ul>"},{"location":"content-ops/PC3/#development-process","title":"Development Process","text":"<ul> <li>Change on the project SHALL be governed by the pattern of accurately identifying problems and applying minimal, accurate solutions to these problems.</li> <li>To initiate changes, a user SHALL log an issue on the project Platform issue tracker.</li> <li>The user SHOULD write the issue by describing the problem they face or observe.</li> <li>The user SHOULD seek consensus on the accuracy of their observation, and the value of solving the problem.</li> <li>Thus, the release history of the project SHALL be a list of meaningful issues logged and solved.</li> <li>To work on an issue, a Contributor SHALL fork the project repository and then work on their forked repository.</li> <li>To submit a patch, a Contributor SHALL create a Platform pull request back to the project.</li> <li>A Contributor SHALL NOT commit changes directly to the project.</li> <li>To discuss a patch, people MAY comment on the Platform pull request, on the commit, or elsewhere.</li> <li>To accept or reject a patch, a Maintainer SHALL use the Platform interface to merge the patch.</li> <li>Maintainers SHOULD NOT merge their own patches except in exceptional cases, such as non-responsiveness from other Maintainers for an extended period (more than 1-2 days).</li> <li>Maintainers SHALL NOT make value judgments on correct patches, this is handled by the optional Code Review Process.</li> <li>Maintainers SHOULD ask for improvements to incorrect patches and SHOULD reject incorrect patches if the Contributor does not respond constructively.</li> <li>Maintainers MAY commit changes to non-source documentation directly to the project.</li> <li>The user who created an issue SHOULD close the issue after checking the patch is successful.</li> <li>Maintainers SHOULD close user issues that are left open without action for an uncomfortable period of time.</li> </ul>"},{"location":"content-ops/PC3/#code-review-process","title":"Code Review Process","text":"<ul> <li>The project MAY use a code review process, particularly if it is a shipping project with non-trivial complexity.</li> <li>If code reviews are enabled for the project, Maintainers SHALL NOT merge a patch until a Reviewer has examined and approved the patch.</li> <li>If code reviews are not enabled for the project, Maintainers SHALL merge correct patches rapidly.</li> <li>Code reviews are not enabled for this project</li> </ul>"},{"location":"content-ops/PC3/#branches-and-releases","title":"Branches and Releases","text":"<ul> <li>The project SHALL have one branch (\"master\") that always holds the latest in-progress version and SHOULD always build.</li> <li>The project SHALL NOT use topic branches for any reason. Personal forks MAY use topic branches.</li> <li>To make a stable release someone SHALL fork the repository by copying it and thus become maintainer of this repository.</li> <li>Stable releases SHALL always be released from the repository master.</li> <li>Forking a project for stabilization MAY be done unilaterally and without agreement of project maintainers.</li> <li>Maintainers of the stabilization project SHALL maintain it through pull requests which MAY cherry-pick patches from the forked project.</li> <li>A patch to a repository declared \"stable\" SHALL be accompanied by a reproducible test case.</li> <li>A stabilization repository SHOULD progress through these phases: \"unstable\", \"candidate\", \"stable\", and then \"legacy\". That is, the default behavior of stabilization repositories is to die.</li> </ul>"},{"location":"content-ops/PC3/#evolution-of-public-contracts","title":"Evolution of Public Contracts","text":"<ul> <li>All Public Contracts (APIs or protocols) MUST be documented.</li> <li>All Public Contracts SHALL use Semantic Versioning [2].</li> <li>All Public Contracts SHOULD have space for extensibility and experimentation.</li> <li>A patch that modifies a Public Contract SHOULD not break existing applications unless there is prior consensus on the value of doing this.</li> <li>A patch that introduces new features SHOULD do so using new names (a new contract).</li> <li>New contracts SHOULD be marked as \"draft\" until they are stable and used by real users.</li> <li>Tests for CI/CD automation SHOULD be provided for new contracts to ensure patches are not breaking the contract.</li> <li>Old contracts SHOULD be deprecated in a systematic fashion by marking them as \"deprecated\" and replacing them with new contracts as needed.</li> <li>When sufficient time has passed, old deprecated contracts SHOULD be removed.</li> <li>Old names SHALL NOT be reused by new contracts.</li> </ul>"},{"location":"content-ops/PC3/#issue-format","title":"Issue Format","text":"<ul> <li>One issue SHOULD address one single identifiable problem or a small set of tightly related problems.</li> <li>The issue title SHOULD state the observed problem in minimal fashion. The statement SHOULD start with \"Problem:\"</li> <li>The issue body SHOULD capture all relevant data in a minimal and accurate fashion.</li> <li>The issue body MAY propose solutions. The statement SHOULD start with \"Solution:\"</li> <li>Users SHALL NOT log feature requests, ideas, suggestions, or any solutions to problems that are not explicitly documented and provable.</li> </ul>"},{"location":"content-ops/PC3/#task-and-role-assignment","title":"Task and Role Assignment","text":"<ul> <li>All tasks and roles SHALL be self-assigned, based on individual judgement of the value of taking on a certain task or role.</li> </ul>"},{"location":"content-ops/PC3/#bibliography","title":"Bibliography","text":"<ol> <li>\"Key words for use in RFCs to Indicate Requirement Levels\" - ietf.org</li> <li>\"Semantic Versioning 2.0.0\" - semver.org</li> </ol>"},{"location":"content-ops/about-RFCs/","title":"About RFCs","text":"<p>Definitions first: a software contract is an API, or a protocol, or some other formalized interaction that allows two otherwise unconnected components of a system to work together [1].</p> <p>All libraries and products implement contracts, explicit or implicit. Contracts may be documented (using formal prose like RFCs, ideally), or embedded in code (less than ideal) [1].</p> <p>A contract may have multiple independent and competing implementations [1].</p>"},{"location":"content-ops/about-RFCs/#contracts","title":"Contracts","text":"<p>Hint</p> <p>The following content is cited from Pieter Hintjens Book ZeroMQ, Chapter 7. For a more complete and comprehensive explanation see [2]. The book is very much recommended.</p> <p>A good software architecture depends on contracts, and the more explicit they are, the better things scale.</p> <p>So what is a contract in a distributed system? There are, in my experience, two types of contract:</p> <ul> <li>The APIs to client applications. The APIs need to be as absolutely simple, consistent, and familiar as possible.</li> <li>The protocols that connect the pieces.</li> </ul> <p>Writing contracts is perhaps the most difficult part of large-scale architecture. A good contract (be it an API, a protocol, or a rental agreement) has to be simple, unambiguous, technically sound, and easy to enforce.</p> <p>Like any technical skill, it\u2019s something you have to learn and practice.</p>"},{"location":"content-ops/about-RFCs/#contracts-are-hard","title":"Contracts are hard","text":"<p>I\u2019ll try to summarize what I\u2019ve learned from my experience as a protocol writer:</p> <ul> <li>Start simple, and develop your specifications step-by-step. Don\u2019t solve problems you don\u2019t have in front of you.</li> <li>Make nothing for which you cannot demonstrate an immediate need. Your specification solves problems; it does not provide features. Make the simplest plausible solution for each problem that you identify.</li> <li>Implement your protocol as you build it, so that you are aware of the technical consequences of each choice.</li> <li>Test your specification on other people as you build it. Your best feedback on a specification is when someone else tries to implement it without the assumptions and knowledge that you have in your head.</li> <li>Be prepared to throw it out and start again as often as needed. Plan for this, by layering your architecture so that, e.g., you can keep an API but change the underlying protocols.</li> </ul>"},{"location":"content-ops/about-RFCs/#how-to-write-contracts-rfcs","title":"How to write contracts (RFCs)","text":"<p>When you start to write a specification document, stick to a consistent structure so that your readers know what to expect. Here is the structure I use:</p> <ul> <li>Cover section: with a one-line summary, URL to the spec, formal name, version, who to blame.</li> <li>The change process: i.e., how can I as a reader fix problems in the specification?</li> <li>Use of language: MUST, MAY, SHOULD, etc., with a reference to RFC 2119.</li> <li>Maturity indicator: is this an experimental, draft, stable, legacy, or retired version?</li> <li>Goals of the protocol: what problems is it trying to solve?</li> <li>References: to other documents, protocols, etc.</li> </ul> <p>The RFCs of our research group can be found in this repository.</p> <p>If you want to write an RFC, please start by using our templates.</p>"},{"location":"content-ops/about-RFCs/#rfc-lifecycle","title":"RFC lifecycle","text":"<p>The lifecycle of an RFC should follow the COSS - Consensus Oriented Specification System.</p>"},{"location":"content-ops/about-RFCs/#references","title":"References","text":"<p>[1] The End of Software Versions, http://hintjens.com/blog:85</p> <p>[2] ZeroMQ, Pieter Hintjens, O'Reilly Media, Inc., 2013, Print ISBN-13: 978-1-4493-3406-2</p>"},{"location":"content-ops/coding-guidelines/","title":"Rules for writing better code","text":"<ul> <li>Name: DioneCG/rfc:004/CodingGuidelines</li> <li>Editor: Matthias Gabriel</li> <li>Revision: 1.0.1</li> <li>State: stable</li> </ul>"},{"location":"content-ops/coding-guidelines/#preamble","title":"Preamble","text":"<p>The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.</p>"},{"location":"content-ops/coding-guidelines/#goals","title":"Goals","text":"<p>The coding-guidelines are designed to ensure common practises when writing new code, ease maintenance of new code and ensure cross-platform compatibility. Further its meant to serve as a basic best prectises-guide to new users, that started developing C++.</p> <p>This document is structured in two sub-sections: Requirements, which MUST be used and followed by users and Advices, which SHOULD be used.</p>"},{"location":"content-ops/coding-guidelines/#requirements","title":"Requirements","text":""},{"location":"content-ops/coding-guidelines/#major-platforms","title":"Major Platforms","text":"<p>Your code MUST compile on the following major platforms, herein called PLATFORMS, in the sense of all.</p> <ul> <li>Windows Intel x64, MSVC 14 \\(Visual Studio 2015\\)</li> <li>Linux Intel x64, GCC4.8+</li> <li>Linux ARM x64, GCC4.8+</li> </ul> <p>If ones code cannot compile on some of the PLATFORMS due to design \\(e.g. device drivers, which highly depend on the platform they are developed on\\), it be MUST excluded from being compiled using CMake functionality \\(e.g. an option to switch them on, on not supported PLATFORMS\\). One SHOULD always try avoid platform specific code.</p>"},{"location":"content-ops/coding-guidelines/#development-tools","title":"Development Tools","text":"<ul> <li>The programming language MUST be C++11<ul> <li>More modern C++ flavours \\(C++14/17\\) MAY be used, after ensuring that compilers on the PLATFORMS support it</li> </ul> </li> <li>The build environment MUST be the CMake build system</li> <li>Payload datatypes MUST be protobuf classes</li> </ul>"},{"location":"content-ops/coding-guidelines/#code-style","title":"Code Style","text":"<ul> <li>All naming MUST use CamelCase and MUST be meaningful and expressive, for example:</li> </ul> <pre><code>class IniFileReader; //a class, that can read ini files\nvoid CalculateAngularDistance(/*..*/) // a method, that calculates an angular distance)\ndouble averageMean // a variable that represents a calculated average mean value\n</code></pre> <ul> <li>Code MUST be structured, long methods/functions SHOULD be avoided<ul> <li>Another person MUST be able to understand the content of a function immediately</li> <li>Robert C. Martin \\(Uncle Bob\\): \"Methods should be small, smaller than small\"</li> </ul> </li> <li>Public APIs SHOULD be documented \\(e.g. using doxygen\\)</li> <li>One MUST NOT use platform specific headers \\(such as Windows.h\\), if the code is used on other PLATFORMS. Otherwise the usage on other PLATFORMS MUST be prohibited</li> <li>One MUST NOT call virtual functions in constructor/destructor</li> </ul>"},{"location":"content-ops/coding-guidelines/#filestructure","title":"Filestructure","text":"<ul> <li>Appropriate sub-folders in the Dione-tree MUST be used:<ul> <li>Libraries for libraries</li> <li>Services for executables</li> <li>Data for data-containers and .proto files</li> </ul> </li> <li>There SHOULD be one class per header file, except for:<ul> <li>auxilliary classes, whoes context does not exceed their parents scope \\(e.g. are not used elsewhere, for example: configuration of services\\)</li> <li>nested-clases inside its parent</li> </ul> </li> <li>Each header file MUST use a header guard technique. It SHOULD use <code>#pragma once</code> or MAY use traditional header guards)</li> </ul> <p>Example for #pragma once</p> <pre><code>#pragma once\n\nclass Example {};\n</code></pre> <p>Example for Header Guards</p> <pre><code>#ifndef FILENAME_H\n#define FILENAME_H\n\nclass Example {};\n\n#endif //FILENAME_H\n</code></pre> <ul> <li>using namespace .. MUST NOT be used in header files</li> </ul>"},{"location":"content-ops/coding-guidelines/#development-guidelines","title":"Development Guidelines","text":""},{"location":"content-ops/coding-guidelines/#general","title":"General","text":"<ul> <li>Code SHOULD NOT be duplicated, but re-used<ul> <li>If code from an existing Service is to be re-used, instead of copying files a library SHOULD be created and be used by both - the new and the old Service</li> </ul> </li> <li>Code SHOULD be as near as possible to the consuming Service<ul> <li>If code is NOT being used by any other Service/Library, it SHOULD be included in the Service executable directly</li> </ul> </li> <li>Direct member access SHOULD be avoided, setter/getter MAY be used instead</li> <li>Sensor data classes and manipulating/acquiring classes SHOULD be located in detached projects in order separate the ability to use the data from the need of hardware specific dependencies</li> </ul>"},{"location":"content-ops/coding-guidelines/#naming","title":"Naming","text":"<ul> <li>Variables SHOULD be named in CamelCase starting with a small letter</li> <li>Member variables SHOULD be private and start with a small letter and with prefix \"_\"<ul> <li>Any other prefixes SHOULD NOT be used</li> </ul> </li> <li>Methods SHOULD start with a capital letter</li> <li>Example:</li> </ul> <pre><code>class Example {\npublic:\n  void ThisIsAMemberFunction() {\n     int thisIsALocalVariable = 0;\n  }\nprivate:\n   double _thisIsAPrivateDouble;\n};\n</code></pre>"},{"location":"content-ops/coding-guidelines/#c-specific","title":"C++ specific","text":"<ul> <li>One SHOULD REALLY read Scott Meyers books \\(SHOULD REALLY as in: _You SHOULD REALLY buy a present for your girlfriends birthday!_\\)<ul> <li>Effective C++ \\(C++98 concepts, of which most still hold for C++11\\)</li> <li>Effective Modern C++ \\(C++11 and C++14\\)</li> </ul> </li> <li>Modern C++11 concepts SHOULD be used extensively<ul> <li>std::shared_ptr, std::unique_ptr, class enum</li> <li>Lambdas, std::bind</li> <li>Use byte-length specific integral data types: uint64_t instead of unsigned int</li> </ul> </li> <li>One SHOULD prefer built-in C++11 features over platform-specific solutions, for example:<ul> <li>Threads</li> <li>Mutexes</li> <li>Condition Variables</li> </ul> </li> <li>Const-correctnes SHOULD be fulfilled, e.g. if a method doesn't modify a classes state, declare it const<ul> <li>https://isocpp.org/wiki/faq/const-correctness</li> </ul> </li> </ul> <pre><code>double ThisMethodDoesNotModify(double firstArgument) const;\n</code></pre> <ul> <li>All complex function parameters SHOULD be passed by \\(const-\\)reference</li> </ul> <pre><code>void MyStoreFunction(const MySuperComplexType&amp; complexType, const std::string&amp; fileName) const;\n</code></pre> <ul> <li>All integral types SHOULD be passed by value</li> </ul> <pre><code>double MyFancyDoubleAdder(double firstArgument, double secondArgument) const;\n</code></pre>"},{"location":"content-ops/coding-guidelines/#history","title":"History","text":""},{"location":"content-ops/coding-guidelines/#version-101-stable","title":"Version 1.0.1 \\(stable\\)","text":"<ul> <li>fixed variable naming in examples and clarified naming conventions</li> </ul>"},{"location":"content-ops/coding-guidelines/#version-100","title":"Version 1.0.0","text":"<ul> <li>initial version</li> </ul>"},{"location":"content-ops/how-to-contribute-to-this-guide/","title":"How to contribute to this guide","text":""},{"location":"content-ops/how-to-contribute-to-this-guide/#the-repository-for-this-guide","title":"The repository for this guide","text":"<p>This guide is hosted in a GitHub repository.</p> <p>If you want to contribute, please fork, modify and create a merge request following PC3.</p>"},{"location":"content-ops/how-to-contribute-to-this-guide/#markdown","title":"Markdown","text":"<p>Please use markdown for your text.</p>"},{"location":"content-ops/how-to-contribute-to-this-guide/#linter","title":"Linter","text":"<p>Markdown Linter has been used to maintain the standard and consistency of all the Markdown files.This Linter helps to analyze and indicate the lines of code that violates the markdown's rules.</p> <p>If you are using Visual Studio Code for markdown editing then you can use its Markdownlint Extension.</p>"},{"location":"content-ops/how-to-contribute-to-this-guide/#manual-of-style","title":"Manual of style","text":"<p>We recommend to follow the Wikipedia manual of style.</p> <p>Headings, headers, and captions: Use sentence case, not title case, capitalization in all section headings. Capitalize the first letter of the first word, but leave the rest lower case except for proper names and other items that would ordinarily be capitalized in running text. Source: Wikipedia</p>"},{"location":"content-ops/how-to-contribute-to-this-guide/#syntax-highlighting-for-code-blocks","title":"Syntax highlighting for code blocks","text":"<p>Only the fenced code blocks support syntax highlighting. You need to provide a language indicator as well.</p> <p>Example for C++ language indicator <code>cpp</code>:</p> <pre><code>int main()\n{\n    std::string s1 = \"Hello\";\n    std::string s2 = \"World\";\n    using std::swap;\n    swap(s1, s2);\n}\n</code></pre> <p>becomes:</p> <pre><code>int main()\n{\n    std::string s1 = \"Hello\";\n    std::string s2 = \"World\";\n    using std::swap;\n    swap(s1, s2);\n}\n</code></pre> <p>Syntax highlighting will not work if you do not provide a language indicator (the <code>cpp</code> is missing).</p> <pre><code>int main()\n{\n    std::string s1 = \"Hello\";\n    std::string s2 = \"World\";\n    using std::swap;\n    swap(s1, s2);\n}\n</code></pre> <p>becomes:</p> <pre><code>int main()\n{\n    std::string s1 = \"Hello\";\n    std::string s2 = \"World\";\n    using std::swap;\n    swap(s1, s2);\n}\n</code></pre>"},{"location":"content-ops/how-to-contribute-to-this-guide/#emojis","title":"Emojis","text":"<p>You can use standard emojis.</p> <p>Examples:</p> <p><code>:rocket:</code> becomes </p> <p><code>:smiley_cat:</code> becomes </p> <p>Use with caution and let's not exaggerate... </p>"}]}